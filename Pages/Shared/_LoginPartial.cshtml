@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

<ul class="navbar-nav">
    @if (SignInManager.IsSignedIn(User))
    {
        <li class="nav-item">
            <label class="nav-link text-dark" asp-area="Identity"
                   asp-page="/Account/Manage/Index" title="Manage">
                @{
                    IdentityUser? user = null;
                    string currentUserName = string.Empty;
                    if (User is not null && User.Identity is not null &&
                        User.Identity.Name is not null)
                    {
                        user = await UserManager
                        .FindByNameAsync(User.Identity.Name);
                        List<Claim> claims = new();
                        if (user is not null)
                        {
                            var t = await UserManager.GetClaimsAsync(user);
                            claims = t.ToList();
                            currentUserName = claims[0].Value;
                        }
                    }
                    <span>Hello, @currentUserName</span>
                }
            </label>
        </li>
        <li class="nav-item">
            <form class="form-inline" asp-area="Identity"
                  asp-page="/Account/Logout"
                  asp-route-returnUrl="@Url.Page("/Index", new { area = "" })">
                <button type="submit" class="btn btn-link">Logout</button>
            </form>
        </li>
    }
    else
    {
        <li class="nav-item">
            <a class="btn btn-link" asp-area="Identity"
               asp-page="/Account/Register">Register</a>
        </li>
        <li class="nav-item">
            <a class="btn btn-link" asp-area="Identity"
               asp-page="/Account/Login">Login</a>
        </li>
    }
</ul>
